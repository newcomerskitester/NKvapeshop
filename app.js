// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

// –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞)
let products = [
    {
        id: 1,
        name: "–°–º–∞—Ä—Ç—Ñ–æ–Ω",
        description: "–ú–æ—â–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π",
        price: 299.99,
        emoji: "üì±"
    },
    {
        id: 2,
        name: "–ù–∞—É—à–Ω–∏–∫–∏",
        description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
        price: 99.99,
        emoji: "üéß"
    },
    {
        id: 3,
        name: "–£–º–Ω—ã–µ —á–∞—Å—ã",
        description: "–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –∏ —É–º–Ω—ã–µ —á–∞—Å—ã",
        price: 199.99,
        emoji: "‚åö"
    },
    {
        id: 4,
        name: "–ù–æ—É—Ç–±—É–∫",
        description: "–ò–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫ —Å –º–æ—â–Ω–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–æ–π",
        price: 1299.99,
        emoji: "üíª"
    },
    {
        id: 5,
        name: "–ü–ª–∞–Ω—à–µ—Ç",
        description: "–ü–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π",
        price: 499.99,
        emoji: "üì±"
    },
    {
        id: 6,
        name: "–§–æ—Ç–æ–∫–∞–º–µ—Ä–∞",
        description: "–ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—ä–µ–º–∫–∏",
        price: 899.99,
        emoji: "üì∑"
    }
];

// –ö–æ—Ä–∑–∏–Ω–∞
let cart = JSON.parse(localStorage.getItem('cart')) || {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    showProducts();
    updateCartCount();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É Telegram
    document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
    document.body.style.color = tg.themeParams.text_color || '#000000';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
function showProducts() {
    switchView('products-view');
    renderProducts();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function showCart() {
    switchView('cart-view');
    renderCart();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function switchView(viewId) {
    document.querySelectorAll('.view').forEach(view => {
        view.classList.remove('active');
    });
    document.getElementById(viewId).classList.add('active');
}

// –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts() {
    const productsList = document.getElementById('products-list');
    productsList.innerHTML = '';

    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        productCard.onclick = () => showProductDetail(product);
        
        productCard.innerHTML = `
            <div class="product-image">${product.emoji}</div>
            <div class="product-name">${product.name}</div>
            <div class="product-price">$${product.price}</div>
        `;
        
        productsList.appendChild(productCard);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
function showProductDetail(product) {
    const detailView = document.getElementById('product-detail-view');
    detailView.innerHTML = `
        <div class="cart-header">
            <button onclick="showProducts()">‚Üê –ù–∞–∑–∞–¥</button>
            <h2>${product.name}</h2>
        </div>
        <div style="text-align: center; margin: 20px 0;">
            <div style="font-size: 4em; margin-bottom: 20px;">${product.emoji}</div>
            <h3>${product.name}</h3>
            <p style="margin: 15px 0; color: #666;">${product.description}</p>
            <div style="font-size: 1.5em; font-weight: bold; color: #4a76a8; margin: 20px 0;">
                $${product.price}
            </div>
            <button onclick="addToCart(${product.id})" 
                    style="background: #4a76a8; color: white; border: none; padding: 15px 30px; 
                           border-radius: 8px; font-size: 1.1em; cursor: pointer;">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
        </div>
    `;
    switchView('product-detail-view');
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
    if (cart[productId]) {
        cart[productId].quantity += 1;
    } else {
        const product = products.find(p => p.id === productId);
        cart[productId] = {
            ...product,
            quantity: 1
        };
    }
    
    saveCart();
    updateCartCount();
    tg.HapticFeedback.impactOccurred('light'); // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    showProducts(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
}

// –†–µ–Ω–¥–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
function renderCart() {
    const cartItems = document.getElementById('cart-items');
    const totalPriceElement = document.getElementById('total-price');
    
    cartItems.innerHTML = '';
    let totalPrice = 0;

    Object.values(cart).forEach(item => {
        const itemTotal = item.price * item.quantity;
        totalPrice += itemTotal;

        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div>
                <strong>${item.name}</strong>
                <div>$${item.price} x ${item.quantity} = $${itemTotal.toFixed(2)}</div>
            </div>
            <div class="cart-item-controls">
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, -1)">-</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, 1)">+</button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    });

    totalPriceElement.textContent = totalPrice.toFixed(2);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
function updateQuantity(productId, change) {
    if (cart[productId]) {
        cart[productId].quantity += change;
        
        if (cart[productId].quantity <= 0) {
            delete cart[productId];
        }
        
        saveCart();
        updateCartCount();
        renderCart();
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
function updateCartCount() {
    const totalItems = Object.values(cart).reduce((sum, item) => sum + item.quantity, 0);
    document.getElementById('cart-count').textContent = totalItems;
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (Object.keys(cart).length === 0) {
        tg.showPopup({
            title: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
            message: '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞'
        });
        return;
    }

    const total = Object.values(cart).reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    tg.showConfirm(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É $${total.toFixed(2)}?`, (confirmed) => {
        if (confirmed) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –±–æ—Ç–∞
            tg.sendData(JSON.stringify({
                action: 'checkout',
                cart: cart,
                total: total,
                user: tg.initDataUnsafe.user
            }));
            
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart = {};
            saveCart();
            updateCartCount();
            
            tg.showPopup({
                title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
                message: '–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π'
            });
            
            showProducts();
        }
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function filterProducts() {
    const searchTerm = document.getElementById('search').value.toLowerCase();
    const filteredProducts = products.filter(product => 
        product.name.toLowerCase().includes(searchTerm) ||
        product.description.toLowerCase().includes(searchTerm)
    );
    
    const productsList = document.getElementById('products-list');
    productsList.innerHTML = '';
    
    filteredProducts.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        productCard.onclick = () => showProductDetail(product);
        
        productCard.innerHTML = `
            <div class="product-image">${product.emoji}</div>
            <div class="product-name">${product.name}</div>
            <div class="product-price">$${product.price}</div>
        `;
        
        productsList.appendChild(productCard);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', initApp);